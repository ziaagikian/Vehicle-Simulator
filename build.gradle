/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */
// For Docker
buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-docker-plugin:3.2.1'
    }
}


// Apply the java-library plugin to add support for Java Library
apply  plugin: 'java'

apply plugin: 'java-library'
//For Docker
apply plugin: 'application'
// Docker Plugin
apply plugin: 'com.bmuschko.docker-java-application'

//Container and Image libraries
import com.bmuschko.gradle.docker.tasks.container.*
import com.bmuschko.gradle.docker.tasks.image.*

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'com.swedq.challenge.vehicle.simulator'
version = '1.0.0'

mainClassName  = 'com.swedq.challenge.vehicle.simulator.Main'

// In this section you declare where to find the dependencies of your project
//repositories {
    //  jcenter and  maven for resolving your dependencies.
  //  jcenter()
        
//}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:21.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    // For Http Connection
    compile 'org.apache.httpcomponents:httpclient:4.5.10'
    //Google Gson Library for JSON handling
    compile 'com.google.code.gson:gson:2.8.6'       
}

// ---- Docker  Action

docker {
    javaApplication {
        baseImage = 'openjdk:latest'
        tag = 'vehicle-simulator'
        
        
    }
}

task createContainer(type: DockerCreateContainer) {
	containerName  = 'vehicle-simulator'
    dependsOn dockerBuildImage
    targetImageId { dockerBuildImage.getImageId() }
}

task startContainer(type: DockerStartContainer) {
    dependsOn createContainer
    targetContainerId { createContainer.getContainerId() }
}

// Run Jar File  Support
jar{
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest{
        attributes 'Main-Class': mainClassName
        }

}



